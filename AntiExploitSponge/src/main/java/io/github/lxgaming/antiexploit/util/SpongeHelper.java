/*
 * Copyright 2017 Alex Thomson
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.lxgaming.antiexploit.util;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.spongepowered.api.command.args.GenericArguments;
import org.spongepowered.api.command.spec.CommandSpec;
import org.spongepowered.api.text.Text;

import io.github.lxgaming.antiexploit.entries.ExploitData;

public class SpongeHelper {
	
	public static void registerCommands() {
		CommandSpec.Builder commandSpecBuilder = CommandSpec.builder();
		commandSpecBuilder.description(Text.of("Main Plugin Command."));
		commandSpecBuilder.arguments(
				GenericArguments.optional(GenericArguments.string(Text.of("option"))),
				GenericArguments.optional(GenericArguments.string(Text.of("productId"))),
				GenericArguments.optional(GenericArguments.string(Text.of("confirm"))));
		
		//commandSpecBuilder.executor(new ShopCommand());
		//Sponge.getCommandManager().register(EntityManager.getInstance(), commandSpecBuilder.build(), "shop", "lolshop", "lolnetshop");
	}
	
	public static void registerListeners() {
		//Sponge.getEventManager().registerListeners(EntityManager.getInstance(), new EntityManagerListener());
	}
	
	public static Map<String, ExploitData> getExploitMap(Object object) {
		if (object != null) {
			return ((Map<?, ?>) object).entrySet().stream().collect(Collectors.toMap(getStringTransformer(), getExploitDataTransformer()));
		}
		return new HashMap<String, ExploitData>();
	}
	
	private static Function<Entry<?, ?>, String> getStringTransformer() {
		return new Function<Entry<?, ?>, String>() {
			public String apply(Entry<?, ?> entry) {
				if (entry.getKey() instanceof String) {
					return (String) entry.getKey();
				}
				return null;
			}
		};
	}
	
	private static Function<Entry<?, ?>, ExploitData> getExploitDataTransformer() {
		return new Function<Entry<?, ?>, ExploitData>() {
			public ExploitData apply(Entry<?, ?> entry) {
				System.out.println(entry.getValue().getClass().getName());
				if (entry.getValue() instanceof ExploitData) {
					return (ExploitData) entry.getValue();
				}
				return null;
			}
		};
	}
}