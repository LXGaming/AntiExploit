/*
 * Copyright 2017 Alex Thomson
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.lxgaming.antiexploit.configuration;

import java.io.IOException;

import io.github.lxgaming.antiexploit.AntiExploit;
import io.github.lxgaming.antiexploit.entries.Config;
import io.github.lxgaming.antiexploit.util.SpongeHelper;
import ninja.leaping.configurate.ConfigurationOptions;
import ninja.leaping.configurate.commented.CommentedConfigurationNode;
import ninja.leaping.configurate.hocon.HoconConfigurationLoader;
import ninja.leaping.configurate.loader.ConfigurationLoader;

public class Configuration {
	
	private ConfigurationLoader<CommentedConfigurationNode> configurationLoader;
	private ConfigurationOptions configurationOptions;
	private CommentedConfigurationNode configurationNode;
	private Config config;
	
	public Configuration() {
		configurationLoader = HoconConfigurationLoader.builder().setPath(AntiExploit.getInstance().getPath()).build();
		configurationOptions = ConfigurationOptions.defaults().setShouldCopyDefaults(true);
		config = new Config();
	}
	
	public void loadConfiguration() {
		if (getConfig() == null) {
			AntiExploit.getInstance().getLogger().error("Unable to load configuration file!");
			return;
		}
		
		try {
			configurationNode = getConfigurationLoader().load(getConfigurationOptions());
			getConfig().setDebug(getConfigurationNode().getNode("general", "debug").getBoolean(false));
			getConfig().setHost(getConfigurationNode().getNode("mysql", "host").getString("127.0.0.1"));
			getConfig().setPort(getConfigurationNode().getNode("mysql", "port").getInt(3306));
			getConfig().setDatabase(getConfigurationNode().getNode("mysql", "database").getString("shop"));
			getConfig().setUsername(getConfigurationNode().getNode("mysql", "username").getString("root"));
			getConfig().setPassword(getConfigurationNode().getNode("mysql", "password").getString("password"));
			getConfig().setExploits(SpongeHelper.getExploitMap(getConfigurationNode().getNode("exploits").getValue()));
			AntiExploit.getInstance().getLogger().info("Successfully loaded configuration file.");
		} catch (IOException ex) {
			configurationNode = getConfigurationLoader().createEmptyNode(getConfigurationOptions());
			AntiExploit.getInstance().getLogger().error("Exception loading configuration file!");
			ex.printStackTrace();
		}
	}
	
	public void saveConfiguration() {
		if (getConfig() == null) {
			AntiExploit.getInstance().getLogger().error("Unable to save configuration file!");
			return;
		}
		
		try {
			getConfigurationNode().getNode("general", "debug").setComment("For development purposes.").setValue(getConfig().isDebug());
			getConfigurationNode().getNode("mysql", "host").setComment("MySQL host.").setValue(getConfig().getHost());
			getConfigurationNode().getNode("mysql", "port").setComment("MySQL port.").setValue(getConfig().getPort());
			getConfigurationNode().getNode("mysql", "database").setComment("MySQL database").setValue(getConfig().getDatabase());
			getConfigurationNode().getNode("mysql", "username").setComment("MySQL username").setValue(getConfig().getUsername());
			getConfigurationNode().getNode("mysql", "password").setComment("MySQL password").setValue(getConfig().getPassword());
			getConfigurationNode().getNode("exploits").setComment("Exploit data").setValue(getConfig().getExploits());
			
			getConfigurationLoader().save(getConfigurationNode());
			AntiExploit.getInstance().getLogger().info("Successfully saved configuration file.");
		} catch (IOException ex) {
			AntiExploit.getInstance().getLogger().error("Exception saving configuration file!");
			ex.printStackTrace();
		}
	}
	
	public ConfigurationLoader<CommentedConfigurationNode> getConfigurationLoader() {
		return configurationLoader;
	}
	
	public ConfigurationOptions getConfigurationOptions() {
		return configurationOptions;
	}
	
	public CommentedConfigurationNode getConfigurationNode() {
		return configurationNode;
	}
	
	public Config getConfig() {
		return this.config;
	}
}