package io.github.lxgaming.antiexploit.util;

import java.util.LinkedHashMap;
import java.util.Map;

import org.bukkit.BanList.Type;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;

import io.github.lxgaming.antiexploit.AntiExploit;

public class ExploitManager {
	
	public static Map<String, Integer> exploitData = new LinkedHashMap<String, Integer>();
	
	public static String getEnabledExploits() {
		boolean state = false;
		StringBuilder stringBuilder = new StringBuilder();
		
		for (String exploit : AntiExploit.config.getConfigurationSection("AntiExploit.Exploits").getKeys(false)) {
			if (AntiExploit.config.getBoolean("AntiExploit.Exploits." + exploit + ".Prevent") == true) {
				if (state == true) {
					stringBuilder.append(ChatColor.YELLOW + exploit + ChatColor.GRAY + ", ");
					state = false;
				} else {
					stringBuilder.append(ChatColor.GOLD + exploit + ChatColor.GRAY + ", ");
					state = true;
				}
			}
		}
		return stringBuilder.toString();
	}
	
	public static boolean containsExploit(String string) {
		for (String exploit : exploitData.keySet()) {
			if (exploit.startsWith(string)) {
				return true;
			}
		}
		return false;
	}
	
	public static String getExploitData(String exploit) {
		int triggered = 0;
		
		if (exploitData.containsKey(exploit.toLowerCase())) {
			triggered = exploitData.get(exploit.toLowerCase());
		}
		
		return ChatColor.GOLD + "===== " + ChatColor.GREEN + exploit.toLowerCase() + ChatColor.GOLD + " =====" + "\n"
				+ ChatColor.GOLD + "Triggered - " + ChatColor.AQUA + triggered;
	}
	
	public static void processEvent(Player player, String exploit) {
		if (!exploitData.containsKey(exploit.toLowerCase())) {
			exploitData.put(exploit.toLowerCase(), 0);
		}
		
		exploitData.put(exploit.toLowerCase(), Math.addExact(exploitData.get(exploit.toLowerCase()), 1));
		
		if (AntiExploit.config.getBoolean("AntiExploit.Exploits." + exploit + ".Broadcast") == true) {
			Bukkit.getServer().broadcastMessage(getMessage(player.getName(), exploit, "Broadcast"));
		}
		
		if (AntiExploit.config.getBoolean("AntiExploit.Exploits." + exploit + ".AlertStaff") == true) {
			for (Player onlineplayer : Bukkit.getOnlinePlayers()) {
				if (onlineplayer.hasPermission("AntiExploit.AlertStaff")) {
					onlineplayer.sendMessage(getMessage(player.getName(), exploit, "AlertStaff"));
				}
			}
		}
		
		if (AntiExploit.config.getDouble("AntiExploit.Exploits." + exploit + ".Damage") > 0D) {
			player.damage(AntiExploit.config.getDouble("AntiExploit.Exploits." + exploit + ".Damage"));
		}
		
		if (AntiExploit.config.getBoolean("AntiExploit.Exploits." + exploit + ".Ban") == true) {
			Bukkit.getBanList(Type.NAME).addBan(player.getName(), getMessage(player.getName(), exploit, "Ban"), null, "AntiExploit");
		}
		
		if (AntiExploit.config.getBoolean("AntiExploit.Exploits." + exploit + ".Ban") == true || AntiExploit.config.getBoolean("AntiExploit.Exploits." + exploit + ".Kick") == true) {
			player.kickPlayer(getMessage(player.getName(), exploit, "Kick"));
		}
		return;
	}
	
	private static String getMessage(String playername, String exploit, String event) {
		return ChatColor.translateAlternateColorCodes('&', AntiExploit.config.getString("AntiExploit.Exploits." + exploit + "." + event + "Message").replaceAll("%playername%", playername).replaceAll("%exploit%", exploit));
	}
	
	public static void debugMessage(String message) {
		if (AntiExploit.config.getBoolean("AntiExploit.Debug") == true) {
			AntiExploit.instance.getLogger().info(message);
		}
		return;
	}
}